// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "github.com/rickcorilaco/api-bike-v3/src/core/entity"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"
import values "github.com/rickcorilaco/api-bike-v3/src/core/values"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 entity.Bike) (*entity.Bike, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Bike
	if rf, ok := ret.Get(0).(func(entity.Bike) *entity.Bike); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Bike)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Bike) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *Repository) Delete(_a0 entity.Bike) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Bike) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: bikeID
func (_m *Repository) Get(bikeID uuid.UUID) (*entity.Bike, error) {
	ret := _m.Called(bikeID)

	var r0 *entity.Bike
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.Bike); ok {
		r0 = rf(bikeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Bike)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(bikeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter
func (_m *Repository) List(filter values.BikeListFilter) ([]entity.Bike, error) {
	ret := _m.Called(filter)

	var r0 []entity.Bike
	if rf, ok := ret.Get(0).(func(values.BikeListFilter) []entity.Bike); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Bike)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.BikeListFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
