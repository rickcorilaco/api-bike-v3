// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/rickcorilaco/api-bike-v3/src/core/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	value "github.com/rickcorilaco/api-bike-v3/src/core/value"
)

// BikeService is an autogenerated mock type for the BikeService type
type BikeService struct {
	mock.Mock
}

// Create provides a mock function with given fields: bike
func (_m *BikeService) Create(bike domain.Bike) (*domain.Bike, error) {
	ret := _m.Called(bike)

	var r0 *domain.Bike
	if rf, ok := ret.Get(0).(func(domain.Bike) *domain.Bike); ok {
		r0 = rf(bike)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bike)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Bike) error); ok {
		r1 = rf(bike)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: bike
func (_m *BikeService) Delete(bike domain.Bike) error {
	ret := _m.Called(bike)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Bike) error); ok {
		r0 = rf(bike)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: bikeID
func (_m *BikeService) Get(bikeID uuid.UUID) (*domain.Bike, error) {
	ret := _m.Called(bikeID)

	var r0 *domain.Bike
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Bike); ok {
		r0 = rf(bikeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bike)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(bikeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter
func (_m *BikeService) List(filter value.BikeListFilter) (*domain.Bikes, error) {
	ret := _m.Called(filter)

	var r0 *domain.Bikes
	if rf, ok := ret.Get(0).(func(value.BikeListFilter) *domain.Bikes); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bikes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(value.BikeListFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
