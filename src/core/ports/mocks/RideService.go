// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/rickcorilaco/api-bike-v3/src/core/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	value "github.com/rickcorilaco/api-bike-v3/src/core/value"
)

// RideService is an autogenerated mock type for the RideService type
type RideService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ride
func (_m *RideService) Create(ride domain.Ride) (*domain.Ride, error) {
	ret := _m.Called(ride)

	var r0 *domain.Ride
	if rf, ok := ret.Get(0).(func(domain.Ride) *domain.Ride); ok {
		r0 = rf(ride)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Ride) error); ok {
		r1 = rf(ride)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ride
func (_m *RideService) Delete(ride domain.Ride) (*domain.Ride, error) {
	ret := _m.Called(ride)

	var r0 *domain.Ride
	if rf, ok := ret.Get(0).(func(domain.Ride) *domain.Ride); ok {
		r0 = rf(ride)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Ride) error); ok {
		r1 = rf(ride)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: rideID
func (_m *RideService) Get(rideID uuid.UUID) (*domain.Ride, error) {
	ret := _m.Called(rideID)

	var r0 *domain.Ride
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Ride); ok {
		r0 = rf(rideID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(rideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter
func (_m *RideService) List(filter value.RideListFilter) (*domain.Rides, error) {
	ret := _m.Called(filter)

	var r0 *domain.Rides
	if rf, ok := ret.Get(0).(func(value.RideListFilter) *domain.Rides); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rides)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(value.RideListFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
