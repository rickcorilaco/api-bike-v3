// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/rickcorilaco/api-bike-v3/src/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserService) Create(user domain.User) (*domain.User, error) {
	ret := _m.Called(user)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ErrDuplicateRecord provides a mock function with given fields:
func (_m *UserService) ErrDuplicateRecord() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrInvalidUsernameOrPassword provides a mock function with given fields:
func (_m *UserService) ErrInvalidUsernameOrPassword() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: username, password
func (_m *UserService) Login(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
